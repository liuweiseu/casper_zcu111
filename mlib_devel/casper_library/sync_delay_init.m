function sync_delay_init(DelayLen, use_enable, prog_delay)


% Mask Initialization code
BitWidth = max([2, ceil(log2(DelayLen+1))] );
UseCounter = 1;
if DelayLen == 0,
	UseCounter = 0;
end

%% inports
In = xInport('In');
if use_enable
	en = xInport('en');
end

if prog_delay
	delay = xInport('delay');
end	


%% outports
Out = xOutport('Out');

%% diagram
Constant_out1 = xSignal;
Constant = xBlock(struct('source', 'Constant', 'name', 'Constant'), ...
                         struct('arith_type', 'Unsigned', ...
                                'n_bits', BitWidth, ...
                                'bin_pt', 0, ...
                                'explicit_period', 'on'), ...
                         {}, ...
                         {Constant_out1});

Constant1_out1 = xSignal;
Constant1 = xBlock(struct('source', 'Constant', 'name', 'Constant1'), ...
                          struct('arith_type', 'Unsigned', ...
                                 'const', 0, ...
                                 'n_bits', BitWidth, ...
                                 'bin_pt', 0, ...
                                 'explicit_period', 'on'), ...
                          {}, ...
                          {Constant1_out1});

Constant2_out1 = xSignal;
Constant2 = xBlock(struct('source', 'Constant', 'name', 'Constant2'), ...
                          struct('arith_type', 'Unsigned', ...
                                 'const', DelayLen, ...
                                 'n_bits', BitWidth, ...
                                 'bin_pt', 0, ...
                                 'explicit_period', 'on'), ...
                          {}, ...
                          {Constant2_out1});

Constant3_out1 = xSignal;
Constant3 = xBlock(struct('source', 'Constant', 'name', 'Constant3'), ...
                          struct('arith_type', 'Unsigned', ...
                                 'const', UseCounter, ...
                                 'n_bits', 1, ...
                                 'bin_pt', 0, ...
                                 'explicit_period', 'on'), ...
                          {}, ...
                          {Constant3_out1});

Logical_out1 = xSignal;
Counter_out1 = xSignal;
Logical1_out1 = xSignal;          

if use_enable
	counter_en = Logical1_out1;                      
	Logical1 = xBlock(struct('source', 'Logical', 'name', 'Logical1'), ...
							 struct('logical_function', 'AND'), ...
							 {Logical_out1, en}, ...
							 {Logical1_out1});       	
else
	counter_en = Logical_out1;
end

if prog_delay
	counter_din = delay;
else
	counter_din = Constant2_out1;
end	

Counter = xBlock(struct('source', 'Counter', 'name', 'Counter'), ...
                        struct('operation', 'Down', ...
                               'n_bits', BitWidth, ...
                               'load_pin', 'on', ...
                               'en', 'on', ...
                               'use_rpm', 'on'), ...
                        {In, counter_din, counter_en}, ...
                        {Counter_out1});

Relational1_out1 = xSignal;
Logical = xBlock(struct('source', 'Logical', 'name', 'Logical'), ...
                        struct('logical_function', 'OR'), ...
                        {In, Relational1_out1}, ...
                        {Logical_out1});
                                
                 

Relational_out1 = xSignal;
Mux = xBlock(struct('source', 'Mux', 'name', 'Mux'), ...
                    struct('arith_type', 'Signed  (2''s comp)', ...
                           'n_bits', 8, ...
                           'bin_pt', 2), ...
                    {Constant3_out1, In, Relational_out1}, ...
                    {Out});

Relational = xBlock(struct('source', 'Relational', 'name', 'Relational'), ...
                           struct('latency', 0), ...
                           {Constant_out1, Counter_out1}, ...
                           {Relational_out1});

Relational1 = xBlock(struct('source', 'Relational', 'name', 'Relational1'), ...
                            struct('mode', 'a!=b', ...
                                   'latency', 0), ...
                            {Counter_out1, Constant1_out1}, ...
                            {Relational1_out1});


end

